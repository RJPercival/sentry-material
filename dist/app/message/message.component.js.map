{"version":3,"file":"message.component.js","sourceRoot":"","sources":["message.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA6C,eAAe,CAAC,CAAA;AAG7D,qBAAqC,yBAAyB,CAAC,CAAA;AAE/D,qCAAoC,8CAA8C,CAAC,CAAA;AAUnF;IAGE,0BACU,mBAAwC;QAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAChD,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IACjD,CAAC;IACD,mCAAQ,GAAR;QAAA,iBAKC;QAJC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,SAAS,CACnE,UAAA,YAAY;YACV,KAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QACpC,CAAC,EAAE,UAAA,GAAG,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,EAAE,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,EAA1B,CAA0B,CAAC,CAAC;IAClE,CAAC;IAED,yCAAc,GAAd,UAAe,YAA0B;QAAzC,iBAGC;QAFC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,MAAM,CAAC,UAAU,CAAC,cAAQ,KAAI,CAAC,YAAY,GAAG,IAAI,CAAA,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAC9D,CAAC;IACD,sCAAW,GAAX;QACE,+CAA+C;QAC/C,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;IA7BH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,mBAAmB;YAC7B,SAAS,EAAE,CAAC,qCAAqC,CAAC;YAClD,WAAW,EAAE,sCAAsC;YACnD,UAAU,EAAE,CAAC,aAAM,CAAC;YACpB,SAAS,EAAE,CAAC,qBAAc,CAAC;SAE5B,CAAC;;wBAAA;IAuBF,uBAAC;AAAD,CAAC,AAtBD,IAsBC;AAtBY,wBAAgB,mBAsB5B,CAAA","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { Notification } from '../notification/notification';\nimport {MdIcon, MdIconRegistry} from '@angular2-material/icon';\nimport { Subscription }   from 'rxjs/Subscription';\nimport { NotificationService } from '../notification.service/notification.service';\n\n@Component({\n  selector: 'message-container',\n  styleUrls: ['./app/message/message.component.css'],\n  templateUrl: './app/message/message.component.html',\n  directives: [MdIcon],\n  providers: [MdIconRegistry]\n\n})\nexport class MessageComponent implements OnDestroy, OnInit {\n  notification: Notification;\n  subscription: Subscription;\n  constructor(\n    private notificationService: NotificationService) {\n    this.notificationService = notificationService;\n  }\n  ngOnInit() {\n    this.subscription = this.notificationService.notifications$.subscribe(\n      notification => {\n        this.displayMessage(notification);\n      }, err => console.log(err), () => console.log(\"completed: \"));\n  }\n\n  displayMessage(notification: Notification) {\n    this.notification = notification;\n    window.setTimeout(() => { this.notification = null }, 3000);\n  }\n  ngOnDestroy() {\n    // prevent memory leak when component destroyed\n    this.subscription.unsubscribe();\n  }\n}\n"]}