{"version":3,"file":"log.service.js","sourceRoot":"","sources":["log.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAA8B,eAAe,CAAC,CAAA;AAI9C,QAAO,6BAA6B,CAAC,CAAA;AAGrC;IAKE,oBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAJtB,YAAO,GAAG,UAAU,CAAC,CAAE,iBAAiB;QACxC,0BAAqB,GAAG,wBAAwB,CAAC;QACjD,iBAAY,GAAG,eAAe,CAAC;IAEL,CAAC;IAE3B,gCAAW,GAAnB,UAAoB,KAAU;QAC5B,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;QAC1C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAChD,CAAC;IAED,4BAAO,GAAP;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;aAC/B,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,EAApB,CAAoB,CAAC;aACtC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAED,0CAAqB,GAArB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC;aAC7C,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ;YACd,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;QAAA,CAAC,CAAC;aAC7B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IACD,iCAAY,GAAZ;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;aACpC,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ;YACd,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;QAAA,CAAC,CAAC;aAC7B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAED,2BAAM,GAAN,UAAO,EAAU;QACf,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE;aAClB,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,EAAE,KAAK,EAAE,EAAb,CAAa,CAAC,CAAC,CAAC,CAAC,EAApC,CAAoC,CAAC,CAAC;IACxD,CAAC;IAtCH;QAAC,iBAAU,EAAE;;kBAAA;IAwCb,iBAAC;AAAD,CAAC,AAvCD,IAuCC;AAvCY,kBAAU,aAuCtB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Headers, Http } from '@angular/http';\n\nimport { Log } from '../log/log';\n\nimport 'rxjs/add/operator/toPromise';\n\n@Injectable()\nexport class LogService {\n  private logsUrl = 'app/logs';  // URL to web api\n  private availibilityGraphsUrl = 'app/availibilityGraphs';\n  private mmdGraphsUrl = 'app/mmdGraphs';\n\n  constructor(private http: Http) { }\n\n  private handleError(error: any) {\n    console.error('An error occurred', error);\n    return Promise.reject(error.message || error);\n  }\n\n  getLogs(): Promise<Log[]> {\n    return this.http.get(this.logsUrl)\n      .toPromise()\n      .then(response => response.json().data)\n      .catch(this.handleError);\n  }\n\n  getAvailibilityGraphs(): Promise<Number[]> {\n    return this.http.get(this.availibilityGraphsUrl)\n      .toPromise()\n      .then(response => {\n      return response.json().data;})\n      .catch(this.handleError);\n  }\n  getMMDGraphs(): Promise<Number[]> {\n    return this.http.get(this.mmdGraphsUrl)\n      .toPromise()\n      .then(response => {\n      return response.json().data;})\n      .catch(this.handleError);\n  }\n\n  getLog(id: number) {\n    return this.getLogs()\n      .then(logs => logs.filter(log => log.id === id)[0]);\n  }\n\n}\n"]}